require 'cl'

module Dpl
  module Provider
    class Base < Cl::Cmd
      # tell Cl that this is not meant to be an executable command

      abstract

      # common options that are going to be inherited by all commands
      # (providers), and listed separately in the help output

      opt '--pretend', 'Pretend running the deployment'
      opt '--quiet',   'Suppress any output'

      # this method is rather useless, and only here so you don't get
      # confused by the method name registry_key. it's the name of the
      # provider.

      def name
        registry_key
      end
    end

    class Script < Base
      # let's encourage people to describe their stuff

      summary 'Elementary provider that executes a custom command'

      description <<~str
        This deployment provider executes a single, custom command. This is
        usually a script that is contained in your repository, but it can be
        any command executable in the build environment.

        It is possible to pass arguments to a script deployment like so:

          dpl script -s './scripts/deploy.sh production --verbose'

        Deployment will be marked a failure if the script exits with nonzero
        status.
      str

      # i don't think dpl providers will or should use cli args. i've just put
      # it here so you can marvel at it (and at the help output).

      arg 'script', 'the script!', type: :string, required: true

      # opt is just a wrapper around Ruby's OptionParser, so all the goodness
      # OptionParser brings is here, but in a much more comprehensive way (i
      # think OptionParser's api is teh horrors, which is why Cl exists).
      #
      # types are rather weak, and mostly informative (although with type: :int
      # it would actually cast a string "1" to a Ruby integer, for example). i
      # still think it would be good to have them here in order to encourage
      # people to document their stuff in code. types are currently not
      # included in the help output, but certainly something that could be an
      # option in CL. (in most usecases other than dpl that would be just be
      # clutter)
      #
      # all this would, of course, make it so that allowed options have to be
      # explicitely listed here. no more relaying to Octokit behind the scenes
      # or anything, adding support for options that people now expect, because
      # they are suddenly working, without us even knowing about it. i think
      # that's a good thing. it adds a little bit of trivial work in accepting
      # PRs etc, but it prevents a lot of confusion down the line.

      opt '-s', '--script ./script', 'The script to execute', type: :string #, required: true

      def run
        p [name, args, opts]
      end

      # this is how the interface would look like. again, i don't think we would
      # have args, only opts in dpl providers, so we would work with the `opts`
      # hash that Cl populates.
      #
      #   $ bin/dpl2 script ./foo --pretend
      #
      #   Output:
      #
      #     [:script, ["./foo"], {:pretend=>true}]
      #
      # i like that the provider name now is a sub command, not an option. that's
      # how it should have been designed in the first place, back then. after all
      # it's not an optional bit of information, but super first class.
      #
      # we can, of course, still have a wrapper that provides legacy support for
      # passing the provider name as an option `--provider script`.
      #
      #
      # check out this help output. on the gem-release README i simply add this
      # help output, rather than typing everything out again, and i think it
      # works perfectly fine. i think the same approach would work for dpl,
      # too. the README could then be mostly autogenerated.
      #
      #   $ bin/dpl2 script --help # or
      #   $ bin/dpl2 help scirpt
      #
      #   Output:
      #
      #     Usage: dpl2 script script [options]
      #
      #     Arguments:
      #
      #       script                    the script! (required)
      #
      #     Options:
      #
      #       -s --script ./script      The script to execute
      #
      #     Common Options:
      #
      #       --pretend                 Pretend running the deployment
      #       --quiet                   Suppress any output
      #       --help                    Get help on this command
      #
      #     Summary:
      #
      #       Elementary provider that executes a custom command
      #
      #     Description:
      #
      #       This deployment provider executes a single, custom command. Usually a
      #       script that is contained in your repository, but it can be any command
      #       executable in the build environment.
      #
      #       It is possible to pass arguments to a script deployment like so:
      #
      #         dpl script -s './scripts/deploy.sh production --verbose'
      #
      #       Deployment will be marked a failure if the script exits with nonzero status.
    end
  end
end
